{"ast":null,"code":"var _jsxFileName = \"/Users/khara/Downloads/IOT Project/smart-home-ui/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport { Line } from 'react-chartjs-2';\n//import { CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\nimport { Chart as ChartJS,\n// Import Chart as ChartJS\nCategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(\n// Use ChartJS here\nCategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst MQTT_BROKER = \"ws://localhost:9001\";\nconst MQTT_TOPIC_MOTION = \"home/security/motion\";\nconst MQTT_TOPIC_DOOR = \"home/security/door\";\nconst MQTT_TOPIC_WINDOW = \"home/security/window\";\nconst MQTT_TOPIC_TEMPERATURE = \"home/sensors/temperature\";\nconst MQTT_TOPIC_CAMERA_IMAGE = \"home/camera/door/image\";\nconst MQTT_TOPIC_CAMERA_MOTION = \"home/camera/door/motion\";\nfunction App() {\n  _s();\n  // ... (other state variables)\n  const [cameraImage, setCameraImage] = useState(null);\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_BROKER);\n    client.on('connect', () => {\n      // ... (subscribe to other topics)\n      client.subscribe(MQTT_TOPIC_CAMERA_IMAGE);\n      client.subscribe(MQTT_TOPIC_CAMERA_MOTION);\n    });\n    client.on('message', (topic, message) => {\n      // ... (handle other messages)\n\n      if (topic === MQTT_TOPIC_CAMERA_MOTION) {\n        // Fetch image data from MQTT_TOPIC_CAMERA_IMAGE topic\n        client.publish(MQTT_TOPIC_CAMERA_IMAGE, \"get\"); // Request image\n      } else if (topic === MQTT_TOPIC_CAMERA_IMAGE) {\n        setCameraImage(message.toString()); // Assuming image is Base64 encoded\n      }\n    });\n\n    // ... (cleanup)\n  }, []);\n\n  // ... (rest of your component code)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Door Camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), cameraImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `data:image/jpeg;base64,${cameraImage}`,\n        alt: \"Door Camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ybd9QPDI9/hv59aVQYhaF/lUpGQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","mqtt","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","MQTT_BROKER","MQTT_TOPIC_MOTION","MQTT_TOPIC_DOOR","MQTT_TOPIC_WINDOW","MQTT_TOPIC_TEMPERATURE","MQTT_TOPIC_CAMERA_IMAGE","MQTT_TOPIC_CAMERA_MOTION","App","_s","cameraImage","setCameraImage","client","connect","on","subscribe","topic","message","publish","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/Users/khara/Downloads/IOT Project/smart-home-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport { Line } from 'react-chartjs-2'; \n//import { CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\nimport {\n  Chart as ChartJS, // Import Chart as ChartJS\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nimport 'chart.js/auto'; \n\nChartJS.register( // Use ChartJS here\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst MQTT_BROKER = \"ws://localhost:9001\"; \nconst MQTT_TOPIC_MOTION = \"home/security/motion\";\nconst MQTT_TOPIC_DOOR = \"home/security/door\";\nconst MQTT_TOPIC_WINDOW = \"home/security/window\";\nconst MQTT_TOPIC_TEMPERATURE = \"home/sensors/temperature\";\nconst MQTT_TOPIC_CAMERA_IMAGE = \"home/camera/door/image\";\nconst MQTT_TOPIC_CAMERA_MOTION = \"home/camera/door/motion\";\n\nfunction App() {\n  // ... (other state variables)\n  const [cameraImage, setCameraImage] = useState(null);\n\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_BROKER);\n\n    client.on('connect', () => {\n      // ... (subscribe to other topics)\n      client.subscribe(MQTT_TOPIC_CAMERA_IMAGE);\n      client.subscribe(MQTT_TOPIC_CAMERA_MOTION);\n    });\n\n    client.on('message', (topic, message) => {\n      // ... (handle other messages)\n\n      if (topic === MQTT_TOPIC_CAMERA_MOTION) {\n        // Fetch image data from MQTT_TOPIC_CAMERA_IMAGE topic\n        client.publish(MQTT_TOPIC_CAMERA_IMAGE, \"get\"); // Request image\n      } else if (topic === MQTT_TOPIC_CAMERA_IMAGE) {\n        setCameraImage(message.toString()); // Assuming image is Base64 encoded\n      }\n    });\n\n    // ... (cleanup)\n  }, []);\n\n  // ... (rest of your component code)\n\n  return (\n    <div className=\"App\">\n      {/* ... other UI elements */}\n\n      <div className=\"camera\">\n        <h2>Door Camera</h2>\n        {cameraImage && (\n          <img\n            src={`data:image/jpeg;base64,${cameraImage}`}\n            alt=\"Door Camera\"\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,IAAI,QAAQ,iBAAiB;AACtC;;AAEA,SACEC,KAAK,IAAIC,OAAO;AAAE;AAClBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AAEjB,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvBT,OAAO,CAACU,QAAQ;AAAE;AAChBT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAEDP,OAAO,CAACU,QAAQ,CACdT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,MAAMI,WAAW,GAAG,qBAAqB;AACzC,MAAMC,iBAAiB,GAAG,sBAAsB;AAChD,MAAMC,eAAe,GAAG,oBAAoB;AAC5C,MAAMC,iBAAiB,GAAG,sBAAsB;AAChD,MAAMC,sBAAsB,GAAG,0BAA0B;AACzD,MAAMC,uBAAuB,GAAG,wBAAwB;AACxD,MAAMC,wBAAwB,GAAG,yBAAyB;AAE1D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAM0B,MAAM,GAAGzB,IAAI,CAAC0B,OAAO,CAACZ,WAAW,CAAC;IAExCW,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MACzB;MACAF,MAAM,CAACG,SAAS,CAACT,uBAAuB,CAAC;MACzCM,MAAM,CAACG,SAAS,CAACR,wBAAwB,CAAC;IAC5C,CAAC,CAAC;IAEFK,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,CAACE,KAAK,EAAEC,OAAO,KAAK;MACvC;;MAEA,IAAID,KAAK,KAAKT,wBAAwB,EAAE;QACtC;QACAK,MAAM,CAACM,OAAO,CAACZ,uBAAuB,EAAE,KAAK,CAAC,CAAC,CAAC;MAClD,CAAC,MAAM,IAAIU,KAAK,KAAKV,uBAAuB,EAAE;QAC5CK,cAAc,CAACM,OAAO,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC;;IAEF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAGlBtB,OAAA;MAAKqB,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACrBtB,OAAA;QAAAsB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACnBf,WAAW,iBACVX,OAAA;QACE2B,GAAG,EAAE,0BAA0BhB,WAAW,EAAG;QAC7CiB,GAAG,EAAC;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAChB,EAAA,CA5CQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}