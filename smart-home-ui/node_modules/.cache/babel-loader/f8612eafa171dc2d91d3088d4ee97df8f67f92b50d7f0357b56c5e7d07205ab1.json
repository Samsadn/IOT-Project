{"ast":null,"code":"var _jsxFileName = \"/Users/khara/Downloads/IOT Project/smart-home-ui/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport { Line } from 'react-chartjs-2';\n//import { CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\nimport { Chart as ChartJS,\n// Import Chart as ChartJS\nCategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(\n// Use ChartJS here\nCategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst MQTT_BROKER = \"localhost:1883\"; // Replace with your broker address and ws for websocket\nconst MQTT_TOPIC_MOTION = \"home/security/motion\";\nconst MQTT_TOPIC_DOOR = \"home/security/door\";\nconst MQTT_TOPIC_WINDOW = \"home/security/window\";\nconst MQTT_TOPIC_TEMPERATURE = \"home/sensors/temperature\";\nfunction App() {\n  _s();\n  const [motionDetected, setMotionDetected] = useState(false);\n  const [doorOpen, setDoorOpen] = useState(false);\n  const [windowOpen, setWindowOpen] = useState(false);\n  const [temperature, setTemperature] = useState(20); // Initial temperature\n  const [temperatureData, setTemperatureData] = useState([]);\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_BROKER);\n    client.on('connect', () => {\n      console.log('Connected to MQTT Broker!');\n      client.subscribe(MQTT_TOPIC_MOTION);\n      client.subscribe(MQTT_TOPIC_DOOR);\n      client.subscribe(MQTT_TOPIC_WINDOW);\n      client.subscribe(MQTT_TOPIC_TEMPERATURE);\n    });\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      switch (topic) {\n        case MQTT_TOPIC_MOTION:\n          setMotionDetected(data.motion_detected);\n          break;\n        case MQTT_TOPIC_DOOR:\n          setDoorOpen(data.door_open);\n          break;\n        case MQTT_TOPIC_WINDOW:\n          setWindowOpen(data.window_open);\n          break;\n        case MQTT_TOPIC_TEMPERATURE:\n          setTemperature(data.temperature);\n          setTemperatureData(prevData => {\n            const newData = [...prevData, data.temperature];\n            if (newData.length > 10) {\n              // Keep only the last 10 data points\n              newData.shift();\n            }\n            return newData;\n          });\n          break;\n      }\n    });\n\n    // Clean up on unmount\n    return () => {\n      if (client.connected) {\n        client.end();\n      }\n    };\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  const chartData = {\n    labels: Array.from({\n      length: temperatureData.length\n    }, (_, i) => i + 1),\n    // X-axis labels\n    datasets: [{\n      label: 'Temperature (°C)',\n      data: temperatureData,\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart Home Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensors\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sensors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Motion: \", motionDetected ? 'Detected' : 'Not Detected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Door: \", doorOpen ? 'Open' : 'Closed']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Window: \", windowOpen ? 'Open' : 'Closed']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", temperature, \" \\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Temperature Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"84c8hR+VKWjFtb5n8iU2+DGddXM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","mqtt","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","MQTT_BROKER","MQTT_TOPIC_MOTION","MQTT_TOPIC_DOOR","MQTT_TOPIC_WINDOW","MQTT_TOPIC_TEMPERATURE","App","_s","motionDetected","setMotionDetected","doorOpen","setDoorOpen","windowOpen","setWindowOpen","temperature","setTemperature","temperatureData","setTemperatureData","client","connect","on","console","log","subscribe","topic","message","data","JSON","parse","toString","motion_detected","door_open","window_open","prevData","newData","length","shift","connected","end","chartData","labels","Array","from","_","i","datasets","label","fill","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/khara/Downloads/IOT Project/smart-home-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport { Line } from 'react-chartjs-2'; \n//import { CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\nimport {\n  Chart as ChartJS, // Import Chart as ChartJS\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nimport 'chart.js/auto'; \n\nChartJS.register( // Use ChartJS here\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst MQTT_BROKER = \"localhost:1883\"; // Replace with your broker address and ws for websocket\nconst MQTT_TOPIC_MOTION = \"home/security/motion\";\nconst MQTT_TOPIC_DOOR = \"home/security/door\";\nconst MQTT_TOPIC_WINDOW = \"home/security/window\";\nconst MQTT_TOPIC_TEMPERATURE = \"home/sensors/temperature\";\n\nfunction App() {\n  const [motionDetected, setMotionDetected] = useState(false);\n  const [doorOpen, setDoorOpen] = useState(false);\n  const [windowOpen, setWindowOpen] = useState(false);\n  const [temperature, setTemperature] = useState(20); // Initial temperature\n  const [temperatureData, setTemperatureData] = useState([]);\n\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_BROKER);\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT Broker!');\n      client.subscribe(MQTT_TOPIC_MOTION);\n      client.subscribe(MQTT_TOPIC_DOOR);\n      client.subscribe(MQTT_TOPIC_WINDOW);\n      client.subscribe(MQTT_TOPIC_TEMPERATURE);\n    });\n\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      switch (topic) {\n        case MQTT_TOPIC_MOTION:\n          setMotionDetected(data.motion_detected);\n          break;\n        case MQTT_TOPIC_DOOR:\n          setDoorOpen(data.door_open);\n          break;\n        case MQTT_TOPIC_WINDOW:\n          setWindowOpen(data.window_open);\n          break;\n        case MQTT_TOPIC_TEMPERATURE:\n          setTemperature(data.temperature);\n          setTemperatureData(prevData => {\n            const newData = [...prevData, data.temperature];\n            if (newData.length > 10) { // Keep only the last 10 data points\n              newData.shift();\n            }\n            return newData;\n          });\n          break;\n      }\n    });\n\n    // Clean up on unmount\n    return () => {\n      if (client.connected) {\n        client.end();\n      }\n    };\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  const chartData = {\n    labels: Array.from({ length: temperatureData.length }, (_, i) => i + 1), // X-axis labels\n    datasets: [\n      {\n        label: 'Temperature (°C)',\n        data: temperatureData,\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }\n    ]\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Smart Home Dashboard</h1>\n      <div className=\"sensors\">\n        <h2>Sensors</h2>\n        <p>Motion: {motionDetected ? 'Detected' : 'Not Detected'}</p>\n        <p>Door: {doorOpen ? 'Open' : 'Closed'}</p>\n        <p>Window: {windowOpen ? 'Open' : 'Closed'}</p>\n        <p>Temperature: {temperature} °C</p>\n      </div>\n      <div className=\"chart\">\n        <h2>Temperature Chart</h2>\n        <Line data={chartData} /> \n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}